<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VinjEx</name>
    </assembly>
    <members>
        <member name="T:VinjEx.EventWrapper">
            <summary>
            EventWrapper used for two-way communication.
            No need to use it manually.
            </summary>
        </member>
        <member name="T:VinjEx.Injectable">
            <summary>
            Injection Entry
            <para>You should create such a constructor:</para>
            <example>public ClassNameHere(<see cref="T:EasyHook.RemoteHooking.IContext"></see> inContext, <see cref="T:System.String"></see> channelName) : base(inContext, channelName)</example>
            </summary>
        </member>
        <member name="M:VinjEx.Injectable.IpcConnectClient(System.String)">
            <summary>
            Get interface object from host.
            <para>Fixed method from Easyhook for two-way communication.</para>
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:VinjEx.Injectable.Run(System.Object,System.String)">
            In order to save resources, we make it sleep.
        </member>
        <member name="M:VinjEx.Injectable.Exit(System.Object,System.EventArgs)">
            <summary>
             Stop the Inject DLL. Will call OnUnload after Exit
            </summary>
        </member>
        <member name="M:VinjEx.Injectable.OnLoad">
            <summary>
            Call when the Inject DLL is loaded, before the target remuse.
            </summary>
        </member>
        <member name="M:VinjEx.Injectable.OnCommand(System.Object)">
            <summary>
            Called when host send a command.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:VinjEx.Injectable.SendResponse(System.Object)">
            <summary>
            Send a message to host.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:VinjEx.Injectable.OnUnload">
            <summary>
            Called when the inject dll is going to exit. 
            Will be called after Exit. Be careful if you call Exit manually.
            </summary>
        </member>
        <member name="T:VinjEx.InjectableProcess">
            <summary>
            Injectable Process
            </summary>
        </member>
        <member name="F:VinjEx.InjectableProcess.SLEEP_TIME">
            <summary>
            default thread sleep time
            </summary>
        </member>
        <member name="E:VinjEx.InjectableProcess.OnClientResponse">
            <summary>
            Register by host. Fired when client send response.
            </summary>
        </member>
        <member name="E:VinjEx.InjectableProcess.OnClientExit">
            <summary>
            Register by host. Fired after client unload.
            </summary>
        </member>
        <member name="P:VinjEx.InjectableProcess.SleepInterval">
            <summary>
            How much time(ms) dll thread will sleep once when idle.
            Will pass to dll thread when call <see cref="M:VinjEx.InjectableProcess.Inject(System.String,System.String)"/>. Would be useless after that.
            </summary>
        </member>
        <member name="M:VinjEx.InjectableProcess.#ctor(System.Int32,System.Int32)">
            <summary>
            Injectable Process
            </summary>
            <param name="pid">target PID</param>
            <param name="sleepInterval">how much time dll thread will sleep once when idle</param>
        </member>
        <member name="M:VinjEx.InjectableProcess.Create(System.Int32)">
            <summary>
            [For Compatibility] Create a <see cref="T:VinjEx.InjectableProcess"/>.
            </summary>
            <param name="pid"></param>
            <returns></returns>
        </member>
        <member name="M:VinjEx.InjectableProcess.Command(System.Object)">
            <summary>
            Send command to Injection DLL
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VinjEx.InjectableProcess.Inject(System.String,System.String)">
            <summary>
            Inject a DLL to target
            </summary>
            <param name="assemblyFile">x86 DLL</param>
            <param name="assemblyFile64">x64 DLL, if your target is 64bit program</param>
            <returns></returns>
        </member>
        <member name="M:VinjEx.InjectableProcess.Eject">
            <summary>
            Eject the DLL
            </summary>
        </member>
        <member name="E:VinjEx.InjectInterface.OnClientExit">
            <summary>
            used to stop dll thread
            </summary>
        </member>
    </members>
</doc>
